//-----------------------------------------------------------------------
// <copyright file="GeocodeRequest.cs" company="Tasty Codes">
//     Copyright (c) 2010 Tasty Codes.
// </copyright>
//-----------------------------------------------------------------------

namespace Tasty.Geocode
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using Tasty.Configuration;
    using Tasty.Web;

    /// <summary>
    /// Constructs and performs geocode requests.
    /// </summary>
    [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", Justification = "The spelling is correct.")]
    public class GeocodeRequest
    {
        /// <summary>
        /// Gets the URI of the geocode service.
        /// </summary>
        public static readonly Uri ServiceUri = new Uri("http://maps.google.com/maps/geo");

        private GeocodeResponse response;

        /// <summary>
        /// Initializes a new instance of the GeocodeRequest class.
        /// </summary>
        /// <param name="address">The address to make the geocode request for.</param>
        public GeocodeRequest(GeocodeRequestAddress address)
            : this(address, TastySettings.Section.Geocode.ApiKey)
        {
        }

        /// <summary>
        /// Initializes a new instance of the GeocodeRequest class.
        /// </summary>
        /// <param name="address">The address to make the geocode request for.</param>
        /// <param name="apiKey">The API key to use when making the request.</param>
        public GeocodeRequest(GeocodeRequestAddress address, string apiKey)
        {
            this.Address = address;
            this.ApiKey = apiKey;
            this.RequestUri = CreateRequestUri(address, apiKey);
        }

        /// <summary>
        /// Initializes a new instance of the GeocodeRequest class.
        /// </summary>
        /// <param name="query">The custom query to use when making the geocode request.</param>
        public GeocodeRequest(QueryString query)
        {
            this.RequestUri = CreateRequestUri(query);
        }

        /// <summary>
        /// Gets the address being used to create a request by this instance.
        /// </summary>
        public GeocodeRequestAddress Address { get; private set; }

        /// <summary>
        /// Gets the API key being used to make the request.
        /// </summary>
        public string ApiKey { get; private set; }

        /// <summary>
        /// Gets the request URI generated by this instance.
        /// </summary>
        public Uri RequestUri { get; private set; }

        /// <summary>
        /// Creates a request URI to use in a geocode request for the given address.
        /// Restricts the geocode request to the United States.
        /// </summary>
        /// <param name="address">The address to create a request URI for.</param>
        /// <returns>A geocode service request URI.</returns>
        public static Uri CreateRequestUri(GeocodeRequestAddress address)
        {
            return CreateRequestUri(address, TastySettings.Section.Geocode.ApiKey);
        }

        /// <summary>
        /// Creates a request URI to use in a geocode request for the given address.
        /// Restricts the geocode request to the United States.
        /// </summary>
        /// <param name="address">The address to create a request URI for.</param>
        /// <param name="apiKey">The API key to use when making the request.</param>
        /// <returns>A geocode service request URI.</returns>
        public static Uri CreateRequestUri(GeocodeRequestAddress address, string apiKey)
        {
            QueryString query = new QueryString();
            query.Add("q", address.ToString());
            query.Add("key", apiKey);
            query.Add("sensor", "false");
            query.Add("output", "json");
            query.Add("oe", "utf8");
            query.Add("gl", ".us");

            return CreateRequestUri(query);
        }

        /// <summary>
        /// Creates a request URI to use in a geocode request with the given query.
        /// </summary>
        /// <param name="query">The query to create the request URI for.</param>
        /// <returns>A geocode service request URI.</returns>
        public static Uri CreateRequestUri(QueryString query)
        {
            UriBuilder builder = new UriBuilder(ServiceUri);
            builder.Query = query.ToString();

            return builder.Uri;
        }

        /// <summary>
        /// Makes a geocode request with the given address.
        /// </summary>
        /// <param name="address">The address to make the request with.</param>
        /// <returns>The result of the request.</returns>
        public static GeocodeCallResult Make(GeocodeRequestAddress address)
        {
            return Make(address, TastySettings.Section.Geocode.ApiKey);
        }

        /// <summary>
        /// Makes a geocode request with the given address.
        /// </summary>
        /// <param name="address">The address to make the request with.</param>
        /// <param name="minimumAccuracy">The minimum accuracy requred for a successful response, or 0 if not applicable.</param>
        /// <returns>The result of the request.</returns>
        public static GeocodeCallResult Make(GeocodeRequestAddress address, int minimumAccuracy)
        {
            return Make(address, TastySettings.Section.Geocode.ApiKey, minimumAccuracy);
        }

        /// <summary>
        /// Makes a geocode request with the given address.
        /// </summary>
        /// <param name="address">The address to make the request with.</param>
        /// <param name="apiKey">The API key to use when making the request.</param>
        /// <returns>The result of the request.</returns>
        public static GeocodeCallResult Make(GeocodeRequestAddress address, string apiKey)
        {
            return Make(address, apiKey, 0);
        }

        /// <summary>
        /// Makes a geocode request with the given address.
        /// </summary>
        /// <param name="address">The address to make the request with.</param>
        /// <param name="apiKey">The API key to use when making the request.</param>
        /// <param name="minimumAccuracy">The minimum accuracy requred for a successful response, or 0 if not applicable.</param>
        /// <returns>The result of the request.</returns>
        public static GeocodeCallResult Make(GeocodeRequestAddress address, string apiKey, int minimumAccuracy)
        {
            GeocodeCallResult result = new GeocodeCallResult();

            try
            {
                GeocodeRequest request = new GeocodeRequest(address, apiKey);
                GeocodeResponse response = request.GetResponse();

                if (response.Status.Code == GeocodeResposeStatusCode.Success)
                {
                    var mark = (from p in response.Placemark
                                orderby p.AddressDetails.Accuracy descending
                                select p).First();

                    result.Placemark = mark;

                    if (minimumAccuracy == 0 || mark.AddressDetails.Accuracy >= minimumAccuracy)
                    {
                        result.Status = GeocodeCallStatus.Successful;
                    }
                    else
                    {
                        result.Status = GeocodeCallStatus.NotEnoughAccuracy;
                    }
                }
                else
                {
                    result.Status = GeocodeCallStatus.Unsuccessful;
                }
            }
            catch (GeocodeException)
            {
                result.Status = GeocodeCallStatus.Unsuccessful;
            }

            return result;
        }

        /// <summary>
        /// Gets the response of the geocode request.
        /// </summary>
        /// <returns>A geocode response.</returns>
        [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Property use is discouraged for performance reasons.")]
        public GeocodeResponse GetResponse()
        {
            if (this.response == null)
            {
                WebRequest request = WebRequest.Create(this.RequestUri);
                this.response = this.DeserializeResponse(request.GetResponse());
            }

            return this.response;
        }

        /// <summary>
        /// Gets the response of the geocode request asynchronously.
        /// </summary>
        /// <param name="callback">An action to call when the asynchronous operation has completed.</param>
        public void GetResponseAsync(Action<GeocodeResponse> callback)
        {
            if (this.response == null)
            {
                WebRequest request = WebRequest.Create(this.RequestUri);

                request.BeginGetResponse(
                    delegate(IAsyncResult async)
                    {
                        this.response = this.DeserializeResponse(request.EndGetResponse(async));
                        callback(this.response);
                    }, 
                    null);
            }
            else
            {
                callback(this.response);
            }
        }

        /// <summary>
        /// Deserializes a geocode JSON response into a GeocodeResponse instance.
        /// </summary>
        /// <param name="response">The web response to deserialize.</param>
        /// <returns>A GeocodeResponse instance.</returns>
        /// <exception cref="Tasty.Geocode.GeocodeException"></exception>
        private GeocodeResponse DeserializeResponse(WebResponse response)
        {
            using (Stream stream = response.GetResponseStream())
            {
                using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))
                {
                    GeocodeResponse gr = GeocodeResponse.FromJson(reader.ReadToEnd());

                    if (gr.Status.Code == GeocodeResposeStatusCode.BadKey ||
                        gr.Status.Code == GeocodeResposeStatusCode.ServerError ||
                        gr.Status.Code == GeocodeResposeStatusCode.TooManyQueries)
                    {
                        throw new GeocodeException(this, gr);
                    }

                    return gr;
                }
            }
        }
    }
}
