//-----------------------------------------------------------------------
// <copyright file="TimeZoneRequest.cs" company="Tasty Codes">
//     Copyright (c) 2010 Chad Burggraf.
//     Adapted from code by Jason Sukut, copyright (c) 2010 Jason Sukut.
// </copyright>
//-----------------------------------------------------------------------

namespace Tasty
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.Net;
    using Tasty.Web;

    /// <summary>
    /// Constructs and performs timezone requests.
    /// </summary>
    public class TimeZoneRequest
    {
        /// <summary>
        /// Gets the URI of the timezone service.
        /// </summary>
        public static readonly Uri ServiceUri = new Uri("http://ws.geonames.org/timezone");

        private TimeZoneResponse response;

        /// <summary>
        /// Initializes a new instance of the TimeZoneRequest class.
        /// </summary>
        /// <param name="latitude">The latitude to create the request for.</param>
        /// <param name="longitude">The longitude to create the request for.</param>
        public TimeZoneRequest(decimal latitude, decimal longitude)
        {
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.RequestUri = CreateRequestUri(latitude, longitude);
        }

        /// <summary>
        /// Initializes a new instance of the TimeZoneRequest class.
        /// </summary>
        /// <param name="query">The query string to initialize the request's URI with.</param>
        public TimeZoneRequest(QueryString query)
        {
            this.RequestUri = CreateRequestUri(query);
        }

        /// <summary>
        /// Gets the latitude being used to create a request by this instance.
        /// </summary>
        public decimal Latitude { get; private set; }

        /// <summary>
        /// Gets the longitude being used to create a request by this instance.
        /// </summary>
        public decimal Longitude { get; private set; }

        /// <summary>
        /// Gets the request URI generated by this instance.
        /// </summary>
        public Uri RequestUri { get; private set; }

        /// <summary>
        /// Creates a new <see cref="TimeZoneRequest"/> URI from the given latitude and longitude.
        /// </summary>
        /// <param name="latitude">The latitude to create the URI with.</param>
        /// <param name="longitude">The longitude to create the URI with.</param>
        /// <returns>A <see cref="TimeZoneRequest"/> URI.</returns>
        public static Uri CreateRequestUri(decimal latitude, decimal longitude)
        {
            QueryString query = new QueryString();
            query["lat"] = latitude.ToString(CultureInfo.InvariantCulture);
            query["lng"] = longitude.ToString(CultureInfo.InvariantCulture);

            return CreateRequestUri(query);
        }

        /// <summary>
        /// Creates a new <see cref="TimeZoneRequest"/> URI from the given query string.
        /// </summary>
        /// <param name="query">The query string to create the URI with.</param>
        /// <returns>A <see cref="TimeZoneRequest"/> URI.</returns>
        public static Uri CreateRequestUri(QueryString query)
        {
            return ServiceUri.SetQuery(query);
        }

        /// <summary>
        /// Makes a timezone request and parses the result for the given latitude and longitude.
        /// </summary>
        /// <param name="latitude">The latitude to create the request for.</param>
        /// <param name="longitude">The longitude to create the request for.</param>
        /// <returns>The result of the request.</returns>
        public static TimeZoneCallResult Make(decimal latitude, decimal longitude)
        {
            TimeZoneRequest request = new TimeZoneRequest(latitude, longitude);
            TimeZoneResponse response = request.GetResponse();
            
            return new TimeZoneCallResult()
            {
                Status = response.Status,
                TimeZone = response.TimeZone
            };
        }

        /// <summary>
        /// Gets this instance's response.
        /// </summary>
        /// <returns>A response.</returns>
        [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Property use is discouraged for performance reasons.")]
        public TimeZoneResponse GetResponse()
        {
            if (this.response == null)
            {
                WebRequest request = WebRequest.Create(this.RequestUri);
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();

                this.response = response.StatusCode == HttpStatusCode.OK ?
                    TimeZoneResponse.FromXml(response.GetResponseStream()) :
                    new TimeZoneResponse();
            }

            return this.response;
        }

        /// <summary>
        /// Gets this instance's response asynchronously.
        /// </summary>
        /// <param name="callback">A method to be called when the operation completes.</param>
        public void GetResponseAsync(Action<TimeZoneResponse> callback)
        {
            if (this.response == null)
            {
                WebRequest request = WebRequest.Create(this.RequestUri);

                request.BeginGetResponse(
                    delegate(IAsyncResult result)
                    {
                        HttpWebResponse response = (HttpWebResponse)request.EndGetResponse(result);

                        this.response = response.StatusCode == HttpStatusCode.OK ?
                            TimeZoneResponse.FromXml(response.GetResponseStream()) :
                            new TimeZoneResponse();

                        callback(this.response);
                    },
                    null);
            }
            else
            {
                callback(this.response);
            }
        }
    }
}
