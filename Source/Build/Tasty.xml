<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tasty</name>
    </assembly>
    <members>
        <member name="T:Tasty.Build.Extensions">
            <summary>
            <see cref="N:Tasty.Build"/> extension methods.
            </summary>
        </member>
        <member name="F:Tasty.Build.Extensions.AssemblyFileVersionPattern">
            <summary>
            Gets the regular expression pattern used for matching AssemblyFileVersion attributes in AssemblyInfo files.
            </summary>
        </member>
        <member name="F:Tasty.Build.Extensions.AssemblyVersionPattern">
            <summary>
            Gets the regular expression pattern used for matching AssemblyVersion attributes in AssemblyInfo files.
            </summary>
        </member>
        <member name="M:Tasty.Build.Extensions.SplitConnectionString(System.String)">
            <summary>
            Splits a database connection string into a collection of key/value pairs.
            The resulting keys are all normalized to lower-case.
            </summary>
            <param name="connectionString">The connection string to split.</param>
            <returns>The connection string as a collection of key/value pairs.</returns>
        </member>
        <member name="M:Tasty.Build.Extensions.SplitSqlCommands(System.String)">
            <summary>
            Splits a string of SQL commands on "GO" to enable issuing them
            individually using ADO.
            </summary>
            <param name="sql">The SQL command set to split.</param>
            <returns>A collection of SQL commands.</returns>
        </member>
        <member name="M:Tasty.Build.Extensions.ToConnectionString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets the given collection as a database connection string (key/values paired with '=' and separated by ';').
            </summary>
            <param name="collection">The connection string collection to convert.</param>
            <returns>A connection string.</returns>
        </member>
        <member name="T:Tasty.Build.GetVersion">
            <summary>
            Extends <see cref="T:Microsoft.Build.Utilities.Task"/> to get version information from an assembly or AssemblyInfo.cs file.
            </summary>
        </member>
        <member name="M:Tasty.Build.GetVersion.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.GetVersion.AssemblyFile">
            <summary>
            Gets or sets the path to the assembly DLL to pull version information from.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.AssemblyInfoFile">
            <summary>
            Gets or sets the path of the AssemblyInfo.cs file to pull version information from.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Build">
            <summary>
            Gets the version's build number.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Major">
            <summary>
            Gets the version's major number.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Minor">
            <summary>
            Gets the version's minor number.
            </summary>
        </member>
        <member name="P:Tasty.Build.GetVersion.Revision">
            <summary>
            Gets the version's revision number.
            </summary>
        </member>
        <member name="T:Tasty.Build.IS3PublisherDelegate">
            <summary>
            Delegate for notifications during an <see cref="T:Tasty.Build.S3Publisher"/> publish process.
            </summary>
        </member>
        <member name="M:Tasty.Build.IS3PublisherDelegate.OnFilePublished(System.String,System.String,System.Boolean)">
            <summary>
            Called when a file has been successfully published to Amazon S3.
            </summary>
            <param name="path">The path of the file that was published.</param>
            <param name="objectKey">The resulting object key of the file on Amazon S3.</param>
            <param name="withGzip">A value indicating whether the file was compressed with GZip before publishing.</param>
        </member>
        <member name="T:Tasty.Build.ISchemaUpgradeDelegate">
            <summary>
            Delegate for providing meta-data information about a database being upgraded
            with a <see cref="T:Tasty.Build.SchemaUpgradeService"/> process.
            </summary>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetCommandSet(System.Version)">
            <summary>
            Gets a string of SQL commands that represent a single step
            in the upgrade process. The SQL should represent the upgrade
            to the given version from the version immediately preceding it.
            </summary>
            <param name="forVersion">The version to get the upgrade commands for.</param>
            <returns>A string of SQL commands.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetCurrentVersion">
            <summary>
            Gets the current version the target database is at.
            </summary>
            <returns>The target database's current version.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetTargetVersion">
            <summary>
            Gets the version to upgrade the target database to.
            </summary>
            <returns>The target database's destination version.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.GetUpgradePath(System.Version,System.Version)">
            <summary>
            Gets a collection of individual version steps that represent the path
            for upgrading the target database from one version to another.
            </summary>
            <param name="currentVersion">The version the database is being upgraded from.</param>
            <param name="targetVersion">The version the database is being upgraded to.</param>
            <returns>A collection of versions.</returns>
        </member>
        <member name="M:Tasty.Build.ISchemaUpgradeDelegate.MarkAsUpgraded(System.Version)">
            <summary>
            Marks the target database as successfully upgraded for the given version.
            This method is called after each discreet upgrade step is performed successfully.
            </summary>
            <param name="forVersion">The version to mark the database for.</param>
        </member>
        <member name="T:Tasty.Build.S3Publisher">
            <summary>
            Publishes static assets to an Amazon S3 bucket.
            Compresses files with text-based content types (*.css, *.js, etc.)
            and publishes them with a gzip content encoding.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publisher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the S3Publisher class.
            </summary>
            <param name="accessKeyId">The Amazon S3 access key ID to use when connecting to the service.</param>
            <param name="secretAccessKeyId">The Amazon S3 secret access key ID to use when connecting to the service.</param>
        </member>
        <member name="M:Tasty.Build.S3Publisher.OnFilePublished(System.String,System.String,System.Boolean)">
            <summary>
            Called when a file has been successfully published to Amazon S3.
            </summary>
            <param name="path">The path of the file that was published.</param>
            <param name="objectKey">The resulting object key of the file on Amazon S3.</param>
            <param name="withGzip">A value indicating whether the file was compressed with GZip before publishing.</param>
        </member>
        <member name="M:Tasty.Build.S3Publisher.Publish">
            <summary>
            Publishes the currently-identified file set to Amazon S3.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithBasePath(System.String)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.BasePath"/> and returns this instance.
            </summary>
            <param name="basePath">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithBucketName(System.String)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.BucketName"/> and returns this instance.
            </summary>
            <param name="bucketName">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the <see cref="P:Tasty.Build.S3Publisher.Files"/> collection and then fills it with the given collection and returns this instance.
            </summary>
            <param name="files">The new file collection.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithPrefix(System.String)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.Prefix"/> and returns this instance.
            </summary>
            <param name="prefix">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithPublisherDelegate(Tasty.Build.IS3PublisherDelegate)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.PublisherDelegate"/> and returns this instance.
            </summary>
            <param name="publisherDelegate">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.WithUseSsl(System.Boolean)">
            <summary>
            Sets the value of <see cref="P:Tasty.Build.S3Publisher.UseSsl"/> and returns this instance.
            </summary>
            <param name="useSsl">The value to set.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.Client">
            <summary>
            Gets a new <see cref="T:Amazon.S3.AmazonS3"/> client base on this instance's current state.
            </summary>
            <returns>An <see cref="T:Amazon.S3.AmazonS3"/> client.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.ObjectKey(System.String)">
            <summary>
            Gets the object key to use for the file at the given path.
            </summary>
            <param name="filePath">The file path to get the object key for.</param>
            <returns>The file's object key.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publisher.PublishFile(System.String)">
            <summary>
            Publishes a file to Amazon S3.
            </summary>
            <param name="filePath">The path of the file to publish.</param>
        </member>
        <member name="P:Tasty.Build.S3Publisher.BasePath">
            <summary>
            Gets or sets the base path to use when relativising file paths to publish.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.BucketName">
            <summary>
            Gets or sets the bucket name to use when publishing files.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.Files">
            <summary>
            Gets the collection of files to publish.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.Prefix">
            <summary>
            Gets or sets the prefix to use as the root path for the published directory on S3.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.PublisherDelegate">
            <summary>
            Gets or sets the delegate to use when posting publish notifications.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publisher.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL when connecting to the service.
            </summary>
        </member>
        <member name="T:Tasty.Build.S3Publish">
            <summary>
            Extends <see cref="T:Microsoft.Build.Utilities.Task"/> to publish static assets to Amazon S3.
            Very primitive implementation: does not allow gzip toggling or ACL setting.
            </summary>
        </member>
        <member name="M:Tasty.Build.S3Publish.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Build.S3Publish.OnFilePublished(System.String,System.String,System.Boolean)">
            <summary>
            Called when a file has been successfully published to Amazon S3.
            </summary>
            <param name="path">The path of the file that was published.</param>
            <param name="objectKey">The resulting object key of the file on Amazon S3.</param>
            <param name="withGzip">A value indicating whether the file was compressed with GZip before publishing.</param>
        </member>
        <member name="P:Tasty.Build.S3Publish.AccessKeyId">
            <summary>
            Gets or sets the Amazon S3 access key ID to use when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.BasePath">
            <summary>
            Gets or sets the base path to use when relativizing published file paths.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.BucketName">
            <summary>
            Gets or sets the name of the bucket to publish assets to.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.Files">
            <summary>
            Gets or sets the file set to publish.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.FilesPublished">
            <summary>
            Gets or sets the collection of files that were published.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.Prefix">
            <summary>
            Gets or sets the object prefix to use for object keys when publishing files.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.SecretAccessKeyId">
            <summary>
            Gets or sets the Amazon S3 secret access key ID to use when connecting to the service.
            </summary>
        </member>
        <member name="P:Tasty.Build.S3Publish.UseSsl">
            <summary>
            Gets or sets a value indicating whether to connect to the service using SSL.
            </summary>
        </member>
        <member name="T:Tasty.Build.SchemaUpgradeService">
            <summary>
            Provides a simple SQL schema upgrade service.
            </summary>
        </member>
        <member name="F:Tasty.Build.SchemaUpgradeService.VersionNumberExpression">
            <summary>
            Gets a regular expression that can be used to mach a version number.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.#ctor(System.String,Tasty.Build.ISchemaUpgradeDelegate)">
            <summary>
            Initializes a new instance of the SchemaUpgradeService class.
            </summary>
            <param name="connectionString">A connection string to the database to upgrade.</param>
            <param name="upgradeDelegate">An <see cref="T:Tasty.Build.ISchemaUpgradeDelegate"/> that will provide meta-data information about the target database.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.CreateDatabase(System.String,System.String,System.String)">
            <summary>
            Creates a new database on the server defined by the given connection string.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the server.</param>
            <param name="databaseName">The name of the database to create.</param>
            <param name="filesPath">The path to the directory where the database files will be located.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.CreateDatabase(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new database on the server defined by the given connection string.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the server.</param>
            <param name="databaseName">The name of the database to create.</param>
            <param name="filesPath">The path to the directory where the database files will be located.</param>
            <param name="databaseUser">The name of the server login and database user to create for accessing the database, or null if not applicable.</param>
            <param name="databaseUserPassword">The password of the server login and database user to create for accessing the database, or null if not applicable.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.DatabaseExists(System.String,System.String)">
            <summary>
            Gets a value indicating whether the given database exists for the server
            at the given connection string.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the server.</param>
            <param name="databaseName">The name of the database to check for.</param>
            <returns>True if the database exists, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.DropDatabase(System.String,System.String)">
            <summary>
            Drops the given database.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database server.</param>
            <param name="databaseName">The name of the database to drop.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.DropDatabase(System.String,System.String,System.String)">
            <summary>
            Drops the given database, optionally dropping the givin database login as well.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database server.</param>
            <param name="databaseName">The name of the database to drop.</param>
            <param name="databaseUser">The name of the login to drop, if applicable.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.GenerateInstallScript(System.Version,System.Version,System.String,System.String)">
            <summary>
            Generates a SQL installation script by searching the given directory for SQL script files with
            names that correspond to version numbers and concatenating them together into a file created
            at the given output path.
            </summary>
            <param name="fromVersion">The lower-bound version number to restrict the resulting script to (exclusive).</param>
            <param name="toVersion">The upper-bound version number to restrict the resulting script to (inclusive).</param>
            <param name="searchPath">The directory to search for scripts within (the search with be recursive).</param>
            <param name="outputPath">The path of the output file to create or overwrite.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.GenerateInstallScript(System.Version,System.Version,System.String,System.String,System.Action{System.Version,System.String})">
            <summary>
            Generates a SQL installation script by searching the given directory for SQL script files with
            names that correspond to version numbers and concatenating them together into a file created
            at the given output path.
            </summary>
            <param name="fromVersion">The lower-bound version number to restrict the resulting script to (exclusive).</param>
            <param name="toVersion">The upper-bound version number to restrict the resulting script to (inclusive).</param>
            <param name="searchPath">The directory to search for scripts within (the search with be recursive).</param>
            <param name="outputPath">The path of the output file to create or overwrite.</param>
            <param name="onGenerating">A function that should be called for each script that is found and added to the output.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.ExecuteCommandSet(Tasty.Build.SchemaUpgradeCommandSet,System.Data.SqlClient.SqlConnection)">
            <summary>
            Executes the given <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> on the given <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <param name="commandSet">The <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> containing the SQL commands to execute.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to execute the command set on.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.ExecuteCommandSet(Tasty.Build.SchemaUpgradeCommandSet,System.Data.SqlClient.SqlConnection,System.Nullable{System.Int32})">
            <summary>
            Executes the given <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> on the given <see cref="T:System.Data.SqlClient.SqlConnection"/>.
            </summary>
            <param name="commandSet">The <see cref="T:Tasty.Build.SchemaUpgradeCommandSet"/> containing the SQL commands to execute.</param>
            <param name="connection">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to execute the command set on.</param>
            <param name="commandTimeout">The timeout to set for each command, or null to use the default value.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.Upgrade">
            <summary>
            Performs the upgraded process.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.EnsureConnectionStringCatalog(System.String,System.String)">
            <summary>
            Ensures that the given connection string and database name both contain values, and that
            the connection string does not point to the given database as its initial catalog.
            </summary>
            <param name="connectionString">The connection string to ensure.</param>
            <param name="databaseName">The database name to ensure.</param>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeService.GetResourceAsText(System.String)">
            <summary>
            Gets an embedded resource file's contents as a string.
            </summary>
            <param name="resourceName">The name of the resource to get.</param>
            <returns>An embedded resource's text contents.</returns>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeService.CommandTimeout">
            <summary>
            Gets or sets the timeout, in seconds, to set for each individual command
            during the upgrade process.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeService.UpgradeDelegate">
            <summary>
            Gets or sets an <see cref="T:Tasty.Build.ISchemaUpgradeDelegate"/> that provides
            meta-data information about the database being upgraded.
            </summary>
        </member>
        <member name="T:Tasty.Build.SchemaUpgradeCommandSet">
            <summary>
            Represents a set of SQL commands corresponding to a specific version number.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeCommandSet.#ctor(System.String,System.Version,System.Boolean)">
            <summary>
            Initializes a new instance of the SchemaUpgradeCommandSet class.
            </summary>
            <param name="sql">A string of SQL script to create the command set for.</param>
            <param name="versionNumber">The version number to create the command set for.</param>
            <param name="runInTransaction">A value indicating whether to run this command set in a trasaction.</param>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSet.Commands">
            <summary>
            Gets a collection of the individual commands in this command set.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSet.RunInTransaction">
            <summary>
            Gets or sets a value indicating whether to run this command set in a trasaction.
            Set to false if one or more of the commands in the set are illegal inside of a transaction.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSet.VersionNumber">
            <summary>
            Gets this command set's version number.
            </summary>
        </member>
        <member name="T:Tasty.Build.SchemaUpgradeCommandSetResult">
            <summary>
            Represents the results of an <see cref="T:Tasty.Build.ISchemaUpgradeDelegate"/> request for 
            a string of SQL representing a set of upgrade commands.
            </summary>
        </member>
        <member name="M:Tasty.Build.SchemaUpgradeCommandSetResult.#ctor">
            <summary>
            Initializes a new instance of the SchemaUpgradeCommandSetResult class.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSetResult.RunInTransaction">
            <summary>
            Gets or sets a value indicating whether to run the commands in a transaction.
            Set to false if one or more of the commands in the set are illegal inside of a transaction.
            </summary>
        </member>
        <member name="P:Tasty.Build.SchemaUpgradeCommandSetResult.Sql">
            <summary>
            Gets or sets the SQL script to run.
            </summary>
        </member>
        <member name="T:Tasty.Build.SetVersion">
            <summary>
            Implements <see cref="T:Microsoft.Build.Utilities.Task"/> to set version information in AssemblyInfo files.
            </summary>
        </member>
        <member name="M:Tasty.Build.SetVersion.#ctor">
            <summary>
            Initializes a new instance of the SetVersion class.
            </summary>
        </member>
        <member name="M:Tasty.Build.SetVersion.Execute">
            <summary>
            Executes the task.
            </summary>
            <returns>True if the task executed successfully, false otherwise.</returns>
        </member>
        <member name="P:Tasty.Build.SetVersion.Files">
            <summary>
            Gets or sets the file set to set version information in.
            </summary>
        </member>
        <member name="P:Tasty.Build.SetVersion.SetAssemblyFileVersion">
            <summary>
            Gets or sets a value indicating whether to set the AssemblyFileVersion attribute.
            </summary>
        </member>
        <member name="P:Tasty.Build.SetVersion.SetAssemblyVersion">
            <summary>
            Gets or sets a value indicating whether to set the AssemblyVersion attribute.
            </summary>
        </member>
        <member name="P:Tasty.Build.SetVersion.Version">
            <summary>
            Gets or sets the version string to set.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.GeocodeElement">
            <summary>
            Represents the geocode configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.GeocodeElement.ApiKey">
            <summary>
            Gets or sets the API key to use in geocode requests.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.HttpElement">
            <summary>
            Represents the HTTP configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.HttpElement.Redirects">
            <summary>
            Gets the configured HTTP redirects collection.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.HttpRedirectRuleElement">
            <summary>
            Represents a redirect rule element in the configuration.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.HttpRedirectRuleElement.Pattern">
            <summary>
            Gets or sets the rule's regular expression pattern.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.HttpRedirectRuleElement.RedirectsTo">
            <summary>
            Gets or sets the URL the rule redirects to.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.HttpRedirectRuleElement.RedirectType">
            <summary>
            Gets or sets the type of redirect the rule uses.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.HttpRedirectRuleElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.HttpRedirectRuleElement"/>s in the configuration.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.TastyConfigurationElementCollection`1">
            <summary>
            Represents the base class for <see cref="T:System.Configuration.ConfigurationElementCollection"/> implementors.
            </summary>
            <typeparam name="T">The type of the configuration elements contained in the collection.</typeparam>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.Add(`0)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator that can be used to enumerate over the collection.
            </summary>
            <returns>The collection's enumerator.</returns>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to the given array, starting at the given index in the array.
            </summary>
            <param name="array">The array to copy elements to.</param>
            <param name="arrayIndex">The index in the array to start copying at.</param>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.Remove(`0)">
            <summary>
            Removes the given item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.TastyConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of the collection's contained <see cref="T:System.Configuration.ConfigurationElement"/> type.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/> instance.</returns>
        </member>
        <member name="P:Tasty.Configuration.TastyConfigurationElementCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the colleciton is read only.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.HttpRedirectRuleElementCollection.Contains(Tasty.Configuration.HttpRedirectRuleElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.HttpRedirectRuleElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="T:Tasty.Configuration.JobsElement">
            <summary>
            Represents the jobs configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobsElement.Heartbeat">
            <summary>
            Gets or sets the heartbeat timeout (in miliseconds) to use for the job runner. The runner will 
            pause for this duration at the end of each cancel/finish/timeout/dequeue loop.
            When not configured, defaults to 2,000 (2 seconds).
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobsElement.MaximumConcurrency">
            <summary>
            Gets or sets the maximum number of jobs that are allowed to be
            running simultaneously. When not configured, defaults to 25.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobsElement.MaximumFailedRetries">
            <summary>
            Gets or sets the maximum number of retries to perform when a job
            fails or is timed out. When not configured, defaults to 0 (no retries).
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobsElement.Schedules">
            <summary>
            Gets the configured collection of scheduled jobs.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobsElement.Store">
            <summary>
            Gets the configured <see cref="T:Tasty.Jobs.IJobStore"/> implementation to use for persisting job data.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.JobScheduledJobElement">
            <summary>
            Represents a configured scheduled job.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduledJobElement.JobType">
            <summary>
            Gets or sets the scheduled job's type.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduledJobElement.MaximumFailedRetries">
            <summary>
            Gets or sets the scheduled job's override for the maximum number of times
            a failed execution is re-tried.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduledJobElement.Metadata">
            <summary>
            Gets any metadata configured for the scheduled job.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.JobScheduledJobElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.JobScheduledJobElement"/>s in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.JobScheduledJobElementCollection.Contains(Tasty.Configuration.JobScheduledJobElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.JobScheduledJobElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="T:Tasty.Configuration.JobScheduleElement">
            <summary>
            Represents a job schedule in the configuration.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduleElement.Name">
            <summary>
            Gets or sets the schedule's name.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduleElement.Repeat">
            <summary>
            Gets or sets the repeat type the schedule uses.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduleElement.ScheduledJobs">
            <summary>
            Gets the jobs that are configured to run as part of this schedule.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobScheduleElement.StartOn">
            <summary>
            Gets or sets the date and time the schedule starts on.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.JobScheduleElementCollection">
            <summary>
            Represents a collection of <see cref="T:Tasty.Configuration.JobScheduleElement"/>s in the configuration.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.JobScheduleElementCollection.Contains(Tasty.Configuration.JobScheduleElement)">
            <summary>
            Gets a value indicating whether the collection contains the given item.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the collection contains the item, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Configuration.JobScheduleElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique key of the given element.
            </summary>
            <param name="element">The element to get the key of.</param>
            <returns>The given element's key.</returns>
        </member>
        <member name="T:Tasty.Configuration.JobScheduleRepeatType">
            <summary>
            Defines the possible repeat types for job schedules.
            </summary>
        </member>
        <member name="F:Tasty.Configuration.JobScheduleRepeatType.Daily">
            <summary>
            Identifies that a schedule repeats daily.
            </summary>
        </member>
        <member name="F:Tasty.Configuration.JobScheduleRepeatType.Hourly">
            <summary>
            Identifies that a schedule repeats hourly.
            </summary>
        </member>
        <member name="F:Tasty.Configuration.JobScheduleRepeatType.Weekly">
            <summary>
            Identifies that a schedule repeats weekly.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.JobStoreElement">
            <summary>
            Represents a configuration element describing the current <see cref="T:Tasty.Jobs.IJobStore"/> being used.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobStoreElement.JobStoreType">
            <summary>
            Gets or sets the type of the <see cref="T:Tasty.Jobs.IJobStore"/> implementation to use when persisting jobs.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.JobStoreElement.Metadata">
            <summary>
            Gets any metadata configured for the current job store.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.TastySettings">
            <summary>
            Represents the Tasty.dll configuration section.
            </summary>
        </member>
        <member name="M:Tasty.Configuration.TastySettings.GetConnectionStringFromMetadata(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Gets a connection string value from the connection string name identified in the given
            configured metadata collection.
            </summary>
            <param name="metadata">The metadata configuration collection containing the connection string name.</param>
            <returns>The connection string value, or null if not found.</returns>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Section">
            <summary>
            Gets or sets the tasty.dll configuration section.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Geocode">
            <summary>
            Gets the geocode configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Jobs">
            <summary>
            Gets the jobs configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.Http">
            <summary>
            Gets the HTTP configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.TastySettings.UrlTokens">
            <summary>
            Gets the URL tokens configuration element.
            </summary>
        </member>
        <member name="T:Tasty.Configuration.UrlTokensElement">
            <summary>
            Represents the URL tokens configuration element.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.UrlTokensElement.DefaultExpiryHours">
            <summary>
            Gets or sets the default number of hours after creation URL tokens expire.
            When not configured, defaults to 168 (1 week).
            </summary>
        </member>
        <member name="P:Tasty.Configuration.UrlTokensElement.Metadata">
            <summary>
            Gets any metadata configured for the URL token store.
            </summary>
        </member>
        <member name="P:Tasty.Configuration.UrlTokensElement.UrlTokenStoreType">
            <summary>
            Gets or sets the <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> implementation to use when persisting URL tokens.
            </summary>
        </member>
        <member name="T:Tasty.ExceptionXElement">
            <summary>
            Creates an XML-Linq XElement from an Exception instance.
            </summary>
        </member>
        <member name="M:Tasty.ExceptionXElement.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ExceptionXElement class.
            </summary>
            <param name="exception">An Exception to create an XElement from.</param>
        </member>
        <member name="M:Tasty.ExceptionXElement.SerializeToXElement(System.Exception)">
            <summary>
            Serializes the given Exception to an XElement object.
            </summary>
            <param name="exception">The Exception to serialize.</param>
            <returns>The serialized Exception as an XElement.</returns>
        </member>
        <member name="T:Tasty.Files">
            <summary>
            Provides extensions for working with files.
            </summary>
        </member>
        <member name="M:Tasty.Files.GetFilesForPatterns(System.String,System.String)">
            <summary>
            Gets a combined collection of file paths for each file found
            in the given directory for each of the given search patterns.
            </summary>
            <param name="path">The path of the directory to get files from.</param>
            <param name="searchPatterns">The search patterns to use, separated by a semi-colon.</param>
            <returns>A collection of file paths.</returns>
        </member>
        <member name="M:Tasty.Files.Hash(System.IO.Stream)">
            <summary>
            Computes the SHA1 hash of the given stream. If the stream supports
            seeking it will be moved to position 0 before hashing if necessary.
            </summary>
            <param name="stream">The stream to compute the hash of.</param>
            <returns>The computed SHA1 hash.</returns>
        </member>
        <member name="M:Tasty.Files.SaveAndHash(System.IO.Stream,System.String)">
            <summary>
            Saves the given stream to the given path, computes the resulting
            file's SHA1 hash and returns it.
            </summary>
            <param name="stream">The stream to save and compute the hash of.</param>
            <param name="path">The path to save the stream's contents to.</param>
            <returns>The SHA1 hash of the given stream's file.</returns>
        </member>
        <member name="T:Tasty.Geocode.GeocodeAddressDetails">
            <summary>
            Represents address details in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAddressDetails.Country">
            <summary>
            Gets or sets the country of the address.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAddressDetails.Accuracy">
            <summary>
            Gets or sets the accuracy of the address compared to the geocode request.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeAdministrativeArea">
            <summary>
            Represetns an administrative area in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAdministrativeArea.AdministrativeAreaName">
            <summary>
            Gets or sets the name of the administrative area.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeAdministrativeArea.SubAdministrativeArea">
            <summary>
            Gets or sets the sub-administraive area.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeCallResult">
            <summary>
            Represents the result of an encapsulated geocode request/response call.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCallResult.Placemark">
            <summary>
            Gets or sets the placemark that was returned in the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCallResult.Status">
            <summary>
            Gets or sets the result status of the call.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeCallStatus">
            <summary>
            Defines the possible status results of an encapsulated geocode request/response call.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeCallStatus.Unsuccessful">
            <summary>
            Identifies that the call was unsuccessful due to an exception or bad status code.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeCallStatus.NotEnoughAccuracy">
            <summary>
            Identifies that the response didn't have enough accuracy.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeCallStatus.Successful">
            <summary>
            Identifies that the call was successful.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeCountry">
            <summary>
            Represents a country in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCountry.CountryNameCode">
            <summary>
            Gets or sets the name code of the country.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCountry.CountryName">
            <summary>
            Gets or sets the name of the country.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeCountry.AdministrativeArea">
            <summary>
            Gets or sets the administrative area in the country.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeException">
            <summary>
            Exception thrown when geocode requests fail.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(Tasty.Geocode.GeocodeRequest,Tasty.Geocode.GeocodeResponse)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="request">The request that caused the exception to be thrown.</param>
            <param name="response">The response that caused the exception to be thrown.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the GeocodeException class.
            </summary>
            <param name="info">The SerializationInfo that holds object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the given SerializationInfo with data about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds data about the exception.</param>
            <param name="context">The StreamingContext that holds contextual information about the source or destination.</param>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.Address">
            <summary>
            Gets the address that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.RequestUri">
            <summary>
            Gets the request URI that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.ResponseName">
            <summary>
            Gets the name of the response that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeException.ResponseStatusCode">
            <summary>
            Gets the response status code that caused the exception to be thrown.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeExtendedData">
            <summary>
            Represents extended data in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeExtendedData.LatLonBox">
            <summary>
            Gets or sets the latitude/longitude bounding box of the geocode response.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeLatLonBox">
            <summary>
            Represetns a latitude/longitude bounding box in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.East">
            <summary>
            Gets or sets the eastern coordinate of the box.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.North">
            <summary>
            Gets or sets the northern coordinate of the box.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.South">
            <summary>
            Gets or sets the southern coordinate of the box.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLatLonBox.West">
            <summary>
            Gets or sets the western corrdinate of the box.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeLocality">
            <summary>
            Represents a locality in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLocality.LocalityName">
            <summary>
            Gets or sets the name of the locality.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLocality.Thoroughfare">
            <summary>
            Gets or sets the thoroughfare of the locality.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeLocality.PostalCode">
            <summary>
            Gets or sets the postal code of the locality.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodePlacemark">
            <summary>
            Represents a placemark in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.Address">
            <summary>
            Gets or sets the address string of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.AddressDetails">
            <summary>
            Gets or sets the address details of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.ExtendedData">
            <summary>
            Gets or sets the extended data of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.Id">
            <summary>
            Gets or sets the response ID.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePlacemark.Point">
            <summary>
            Gets or sets the response's location point.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodePoint">
            <summary>
            Represents a point in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePoint.Coordinates">
            <summary>
            Gets or sets the point's coordinates.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePoint.Latitude">
            <summary>
            Gets the latitude value of the coordinates.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePoint.Longitude">
            <summary>
            Gets the longitude value of the coordinates.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodePostalCode">
            <summary>
            Represents a geocode postal code.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodePostalCode.PostalCodeNumber">
            <summary>
            Gets or sets the postal code number.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeRequest">
            <summary>
            Constructs and performs geocode requests.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeRequest.ServiceUri">
            <summary>
            Gets the URI of the geocode service.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.#ctor(Tasty.Geocode.GeocodeRequestAddress)">
            <summary>
            Initializes a new instance of the GeocodeRequest class.
            </summary>
            <param name="address">The address to make the geocode request for.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.#ctor(Tasty.Geocode.GeocodeRequestAddress,System.String)">
            <summary>
            Initializes a new instance of the GeocodeRequest class.
            </summary>
            <param name="address">The address to make the geocode request for.</param>
            <param name="apiKey">The API key to use when making the request.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.#ctor(Tasty.Web.QueryString)">
            <summary>
            Initializes a new instance of the GeocodeRequest class.
            </summary>
            <param name="query">The custom query to use when making the geocode request.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.CreateRequestUri(Tasty.Geocode.GeocodeRequestAddress)">
            <summary>
            Creates a request URI to use in a geocode request for the given address.
            Restricts the geocode request to the United States.
            </summary>
            <param name="address">The address to create a request URI for.</param>
            <returns>A geocode service request URI.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.CreateRequestUri(Tasty.Geocode.GeocodeRequestAddress,System.String)">
            <summary>
            Creates a request URI to use in a geocode request for the given address.
            Restricts the geocode request to the United States.
            </summary>
            <param name="address">The address to create a request URI for.</param>
            <param name="apiKey">The API key to use when making the request.</param>
            <returns>A geocode service request URI.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.CreateRequestUri(Tasty.Web.QueryString)">
            <summary>
            Creates a request URI to use in a geocode request with the given query.
            </summary>
            <param name="query">The query to create the request URI for.</param>
            <returns>A geocode service request URI.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress,System.Int32)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <param name="minimumAccuracy">The minimum accuracy requred for a successful response, or 0 if not applicable.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress,System.String)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <param name="apiKey">The API key to use when making the request.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.Make(Tasty.Geocode.GeocodeRequestAddress,System.String,System.Int32)">
            <summary>
            Makes a geocode request with the given address.
            </summary>
            <param name="address">The address to make the request with.</param>
            <param name="apiKey">The API key to use when making the request.</param>
            <param name="minimumAccuracy">The minimum accuracy requred for a successful response, or 0 if not applicable.</param>
            <returns>The result of the request.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.GetResponse">
            <summary>
            Gets the response of the geocode request.
            </summary>
            <returns>A geocode response.</returns>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.GetResponseAsync(System.Action{Tasty.Geocode.GeocodeResponse})">
            <summary>
            Gets the response of the geocode request asynchronously.
            </summary>
            <param name="callback">An action to call when the asynchronous operation has completed.</param>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequest.DeserializeResponse(System.Net.WebResponse)">
            <summary>
            Deserializes a geocode JSON response into a GeocodeResponse instance.
            </summary>
            <param name="response">The web response to deserialize.</param>
            <returns>A GeocodeResponse instance.</returns>
            <exception cref="T:Tasty.Geocode.GeocodeException"></exception>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequest.Address">
            <summary>
            Gets the address being used to create a request by this instance.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequest.ApiKey">
            <summary>
            Gets the API key being used to make the request.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequest.RequestUri">
            <summary>
            Gets the request URI generated by this instance.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeRequestAddress">
            <summary>
            Represents an address to use in a <see cref="T:Tasty.Geocode.GeocodeRequest"/>.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeRequestAddress.ToString">
            <summary>
            Gets the value of this instance as a string.
            </summary>
            <returns>A string representation of this instance.</returns>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.Street">
            <summary>
            Gets or sets the street number of the address.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.City">
            <summary>
            Gets or sets the city.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeRequestAddress.State">
            <summary>
            Gets or sets the state.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeResponse">
            <summary>
            Represents a response to a geocode request.
            </summary>
        </member>
        <member name="M:Tasty.Geocode.GeocodeResponse.FromJson(System.String)">
            <summary>
            Deserializes a GeocodeResponse from a string of JSON.
            </summary>
            <param name="json">The JSON to deserialize the response from.</param>
            <returns>A GeocodeResponse instance.</returns>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponse.Name">
            <summary>
            Gets or sets the name of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponse.Placemark">
            <summary>
            Gets or sets the placemarks returned by the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponse.Status">
            <summary>
            Gets or sets the status of the response.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeResponseStatus">
            <summary>
            Represents a geocode response status.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponseStatus.Code">
            <summary>
            Gets or sets the status code of the response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeResponseStatus.Request">
            <summary>
            Gets or sets the type of request that generated the response.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeResposeStatusCode">
            <summary>
            Defines the possible <see cref="T:Tasty.Geocode.GeocodeResponseStatus"/> codes.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.Unknown">
            <summary>
            Identifies an unknown status code in a response.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.Success">
            <summary>
            Identifies a successful response.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.ServerError">
            <summary>
            Identifies a server error.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.MissingQuery">
            <summary>
            Identifies an error due to a missing query.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.UnknownAddress">
            <summary>
            Identifies an error due to an unknown address.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.UnavailableAddress">
            <summary>
            Identifies an error due to an unavailable address.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.BadKey">
            <summary>
            Identifies an error due to a bad API key.
            </summary>
        </member>
        <member name="F:Tasty.Geocode.GeocodeResposeStatusCode.TooManyQueries">
            <summary>
            Identifies an error due to too many requests.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeSubAdministrativeArea">
            <summary>
            Represetns a sub-administrative area in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeSubAdministrativeArea.SubAdministrativeAreaName">
            <summary>
            Gets or sets the name of the sub-adminsitrative area.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeSubAdministrativeArea.Locality">
            <summary>
            Gets or sets the locality of the sub-administrative area.
            </summary>
        </member>
        <member name="T:Tasty.Geocode.GeocodeThoroughfare">
            <summary>
            Represents a throroughfare in a geocode response.
            </summary>
        </member>
        <member name="P:Tasty.Geocode.GeocodeThoroughfare.ThoroughfareName">
            <summary>
            Gets or sets the name of the thoroughfare.
            </summary>
        </member>
        <member name="T:Tasty.Http.HttpRedirectModule">
            <summary>
            Implements <see cref="T:System.Web.IHttpModule"/> to do simple regular-expression based HTTP redirection.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.#cctor">
            <summary>
            Initializes static members of the HttpRedirectModule class.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.Dispose">
            <summary>
            Disposes of any unmanaged resources.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.GetMatchingRule(System.Web.HttpContextBase)">
            <summary>
            Gets a rule matching the given HTTP context from the configuration.
            Will cache the results of the match.
            </summary>
            <param name="httpContext">The HTTP context to match.</param>
            <returns>The result of the match.</returns>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the module.
            </summary>
            <param name="context">The <see cref="T:System.Web.HttpApplication"/> that is handling the current request.</param>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.RedirectContext(System.Web.HttpContextBase,Tasty.Http.HttpRedirectRuleMatch)">
            <summary>
            Redirects the given HTTP context to the redirect result of the given rule match.
            </summary>
            <param name="httpContext">The HTTP context to redirect.</param>
            <param name="ruleMatch">The rule match to redirect with.</param>
        </member>
        <member name="M:Tasty.Http.HttpRedirectModule.ContextBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Raises this module's <see cref="T:System.Web.HttpApplication"/>'s BeginRequest event.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:Tasty.Http.HttpRedirectModule.RuleMatcher">
            <summary>
            Gets the rule matcher used when matching rules.
            </summary>
        </member>
        <member name="T:Tasty.Http.HttpRedirectRuleMatch">
            <summary>
            Represents a matching HTTP redirect rule.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectRuleMatch.#ctor(Tasty.Configuration.HttpRedirectRuleElement,System.Text.RegularExpressions.Match)">
            <summary>
            Initializes a new instance of the HttpRedirectRuleMatch class.
            </summary>
            <param name="rule">The rule that matched.</param>
            <param name="matchResult">The result of the match.</param>
        </member>
        <member name="P:Tasty.Http.HttpRedirectRuleMatch.MatchResult">
            <summary>
            Gets the result of the match.
            </summary>
        </member>
        <member name="P:Tasty.Http.HttpRedirectRuleMatch.RedirectResult">
            <summary>
            Gets the rule's redirect URL transformed by the result of the match.
            </summary>
        </member>
        <member name="P:Tasty.Http.HttpRedirectRuleMatch.Rule">
            <summary>
            Gets the rule that matched.
            </summary>
        </member>
        <member name="T:Tasty.Http.HttpRedirectRuleMatcher">
            <summary>
            Matches URIs to <see cref="T:Tasty.Configuration.HttpRedirectRuleElement"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Http.HttpRedirectRuleMatcher.Match(System.Uri,System.Collections.Generic.IEnumerable{Tasty.Configuration.HttpRedirectRuleElement})">
            <summary>
            Gets a rule matching the given request URI.
            </summary>
            <param name="requestUri">The request URI to get a matching rule for.</param>
            <param name="rules">The rule collection to use when matching.</param>
            <returns>A matching rule, or null if none was found.</returns>
        </member>
        <member name="T:Tasty.Http.HttpRedirectType">
            <summary>
            Defines the possible HTTP redirect types.
            </summary>
        </member>
        <member name="F:Tasty.Http.HttpRedirectType.Temporary">
            <summary>
            Identifies a temporary redirect (302).
            </summary>
        </member>
        <member name="F:Tasty.Http.HttpRedirectType.Permanent">
            <summary>
            Identifies a permanent redirect (301).
            </summary>
        </member>
        <member name="T:Tasty.Jobs.IJob">
            <summary>
            Defines the interface for background jobs.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.IJob.Enqueue">
            <summary>
            Enqueues the job for execution.
            </summary>
            <returns>The job record that was persisted.</returns>
        </member>
        <member name="M:Tasty.Jobs.IJob.Enqueue(System.DateTime,System.String)">
            <summary>
            Enqueues the job for execution on a certin date and for a specific schedule.
            </summary>
            <param name="queueDate">The date to queue the job for execution on.</param>
            <param name="scheduleName">The name of the schedule to queue the job for, or null if not applicable.</param>
            <returns>The job record that was persisted.</returns>
        </member>
        <member name="M:Tasty.Jobs.IJob.Execute">
            <summary>
            Executes the job.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.IJob.Serialize">
            <summary>
            Serializes the job state for enqueueing.
            </summary>
            <returns>The serialized job data.</returns>
        </member>
        <member name="P:Tasty.Jobs.IJob.Name">
            <summary>
            Gets the job's display name.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.IJob.Timeout">
            <summary>
            Gets the timeout, in miliseconds, the job is allowed to run for.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.IJobRunnerDelegate">
            <summary>
            Defines the interface for job runner delegates.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.IJobRunnerDelegate.OnCancelJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is canceled.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobRunnerDelegate.OnDequeueJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is dequeued.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobRunnerDelegate.OnEnqueueScheduledJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a scheduled job is enqueued.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobRunnerDelegate.OnError(Tasty.Jobs.JobRecord,System.Exception)">
            <summary>
            Called when an error occurs during the execution of the run-loop.
            Does not get called when a job itself experiences an error; job-specific
            errors are saved in the job store with their respecitve records.
            </summary>
            <param name="record">The record on which the error occurred, if applicable.</param>
            <param name="ex">The exception raised, if applicable.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobRunnerDelegate.OnFinishJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is finished.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobRunnerDelegate.OnTimeoutJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is timed out.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="T:Tasty.Jobs.IJobStore">
            <summary>
            Interface definition for persistent job stores.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.CancelingJobs(System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of jobs that have been marked as <see cref="F:Tasty.Jobs.JobStatus.Canceling"/>.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="ids">A collection of currently running job IDs.</param>
            <param name="canceling">The function to call with the canceling job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.CreateJob(Tasty.Jobs.JobRecord)">
            <summary>
            Creates a new job record.
            </summary>
            <param name="record">The record to create.</param>
            <returns>The created record.</returns>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.DequeueingJobs(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of queued jobs that can be dequeued right now.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="runsAvailable">The maximum number of job job runs currently available, as determined by
            the <see cref="P:Tasty.Configuration.JobsElement.MaximumConcurrency"/> - the number of currently running jobs.</param>
            <param name="dequeueing">The function to call with the dequeued job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.FinishingJobs(System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of jobs that have a status of <see cref="F:Tasty.Jobs.JobStatus.Started"/>
            and can be marked as finished. Opens a new transaction, then calls the delegate to perform any work. 
            The transaction is committed when the delegate returns.
            </summary>
            <param name="ids">A collection of currently running job IDs.</param>
            <param name="finishing">The function to call with the finishing job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.GetJob(System.Int32)">
            <summary>
            Gets a single job record with the given ID.
            </summary>
            <param name="id">The ID of the job record to get.</param>
            <returns>The job record with the given ID, or null if none was found.</returns>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.GetLatestScheduledJobs">
            <summary>
            Gets the single most recently queued job for each unique schedule name in the system.
            </summary>
            <returns>A collection of queued scheduled jobs.</returns>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.TimingOutJobs(System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of jobs that have a status of <see cref="F:Tasty.Jobs.JobStatus.Started"/>
            and can be timed out. Opens a new transaction, then calls the delegate to perform any work.
            The transaction is committed when the delegate returns.
            </summary>
            <param name="ids">A collection of currently running job IDs.</param>
            <param name="timingOut">The function to call with the timing-out job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.IJobStore.UpdateJobs(System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord},System.Action{Tasty.Jobs.JobRecord})">
            <summary>
            Updates a collection of jobs. Opens a new transaction, then calls the delegate to perform
            any work on each record. The transaction is committed when all of the records have been iterated through.
            </summary>
            <param name="records">The records to update.</param>
            <param name="updating">The function to call for each iteration, which should perform any updates necessary on the job record.</param>
        </member>
        <member name="T:Tasty.Jobs.Job">
            <summary>
            Base <see cref="T:Tasty.Jobs.IJob"/> implementation.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.Job.XmlNamespace">
            <summary>
            Gets the XML namespace used during job serialization.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.Job.Enqueue">
            <summary>
            Enqueues the job for execution.
            </summary>
            <returns>The job record that was persisted.</returns>
        </member>
        <member name="M:Tasty.Jobs.Job.Enqueue(System.DateTime,System.String)">
            <summary>
            Enqueues the job for execution on a certin date and for a specific schedule.
            </summary>
            <param name="queueDate">The date to queue the job for execution on.</param>
            <param name="scheduleName">The name of the schedule to queue the job for, or null if not applicable.</param>
            <returns>The job record that was persisted.</returns>
        </member>
        <member name="M:Tasty.Jobs.Job.Execute">
            <summary>
            Executes the job.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.Job.Serialize">
            <summary>
            Serializes the job state for enqueueing.
            </summary>
            <returns>The serialized job data.</returns>
        </member>
        <member name="P:Tasty.Jobs.Job.Name">
            <summary>
            Gets the job's display name.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.Job.Timeout">
            <summary>
            Gets the timeout, in miliseconds, the job is allowed to run for.
            When not overridden, defaults to 60,000 (1 minute).
            </summary>
        </member>
        <member name="T:Tasty.Jobs.JobProxy">
            <summary>
            Provides proxy methods for interacting with <see cref="T:Tasty.Jobs.IJob"/> instances
            in separate <see cref="T:System.AppDomain"/>s.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobProxy.Execute">
            <summary>
            Executes the wrapped job.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobProxy.Initialize(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes this instance for a specific <see cref="T:Tasty.Jobs.IJob"/> type.
            </summary>
            <param name="assembly">The assembly to load the job from.</param>
            <param name="typeName">The type name of the job to load.</param>
        </member>
        <member name="M:Tasty.Jobs.JobProxy.EnsureInitialized">
            <summary>
            Ensures that this instance has been initialized.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobProxy.JobName">
            <summary>
            Gets the wrapped job's name.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobProxy.Timeout">
            <summary>
            Gets the wrapped job's timeout.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobProxy.JobType">
            <summary>
            Gets the job type this instance wraps.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.JobRecord">
            <summary>
            Represents a job record in persistent storage.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRecord.#ctor">
            <summary>
            Initializes a new instance of the JobRecord class.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRecord.#ctor(Tasty.Jobs.JobRecord)">
            <summary>
            Initializes a new instance of the JobRecord class.
            </summary>
            <param name="record">The prototype <see cref="T:Tasty.Jobs.JobRecord"/> to initialize this instance from.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRecord.ToJob">
            <summary>
            Converts this instance's <see cref="P:Tasty.Jobs.JobRecord.JobType"/> and <see cref="P:Tasty.Jobs.JobRecord.Data"/> properties into an <see cref="T:Tasty.Jobs.IJob"/> object.
            </summary>
            <returns>An <see cref="T:Tasty.Jobs.IJob"/> object.</returns>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.Data">
            <summary>
            Gets or sets the serialized job data (i.e., from calling <see cref="M:Tasty.Jobs.IJob.Serialize"/>.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.Exception">
            <summary>
            Gets or sets the exeption that occurred during job execution.
            This property can be set by wrapping the exception in an <see cref="T:Tasty.ExceptionXElement"/>
            and calling ToString().
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.FinishDate">
            <summary>
            Gets or sets the date the job finished, no matter the final status.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.Id">
            <summary>
            Gets or sets the job ID. Use null for a new record.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.JobType">
            <summary>
            Gets or sets the <see cref="T:Tasty.Jobs.IJob"/> implementor that the job is persisted for.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.Name">
            <summary>
            Gets or sets the job's display name (i.e., the value of <see cref="P:Tasty.Jobs.IJob.Name"/>).
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.QueueDate">
            <summary>
            Gets or sets the date the job is queued for.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.ScheduleName">
            <summary>
            Gets or sets the name the schedule the job is queued for, if applicable.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.StartDate">
            <summary>
            Gets or sets the date the job started execution.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRecord.Status">
            <summary>
            Gets or sets the job's status.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.JobRun">
            <summary>
            Represents a single job run.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRun.#ctor(System.Int32,Tasty.Jobs.IJob)">
            <summary>
            Initializes a new instance of the JobRun class.
            </summary>
            <param name="jobId">The ID of the job being run.</param>
            <param name="job">The job to run.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRun.Abort">
            <summary>
            Aborts the job if it is running.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRun.Run">
            <summary>
            Runs the job if it has not already been run and it is not currently running.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRun.RunInternal">
            <summary>
            Internal concrete job execution.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRun.ExecutionException">
            <summary>
            Gets an exception that occurred during job execution, if applicable.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRun.Finished">
            <summary>
            Gets the date the job finished executing, if applicable.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRun.IsRunning">
            <summary>
            Gets a value indicating whether the job is currently running.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRun.Job">
            <summary>
            Gets the job being run.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRun.JobId">
            <summary>
            Gets the ID of the job being run.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRun.Started">
            <summary>
            Gets the date the job run was started, if applicable.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.JobRunner">
            <summary>
            Runs jobs.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.#ctor">
            <summary>
            Prevents a default instance of the JobRunner class from being created.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.OnCancelJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is canceled.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.OnDequeueJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is dequeued.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.OnEnqueueScheduledJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a scheduled job is enqueued.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.OnError(Tasty.Jobs.JobRecord,System.Exception)">
            <summary>
            Called when an error occurs during the execution of the run-loop.
            Does not get called when a job itself experiences an error; job-specific
            errors are saved in the job store with their respecitve records.
            </summary>
            <param name="record">The record on which the error occurred, if applicable.</param>
            <param name="ex">The exception raised, if applicable.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.OnFinishJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is finished.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.OnTimeoutJob(Tasty.Jobs.JobRecord)">
            <summary>
            Called when a job is timed out.
            </summary>
            <param name="record">The job record identifying the affected job.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.Start">
            <summary>
            Starts the runner if it is not already running.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.Start(Tasty.Jobs.IJobRunnerDelegate)">
            <summary>
            Starts the runner if it is not already running.
            </summary>
            <param name="runnerDelegate">The <see cref="T:Tasty.Jobs.IJobRunnerDelegate"/> that should handle notifications.</param>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.Stop">
            <summary>
            Stops the runner if it is running.
            Does not abort any currently executing job runs.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.CancelJobs">
            <summary>
            Cancels any jobs marked as <see cref="F:Tasty.Jobs.JobStatus.Canceling"/>.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.DequeueJobs">
            <summary>
            Dequeues pending jobs in the job store.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.EnqueueScheduledJobs">
            <summary>
            Enqueues any scheduled jobs that are either new to the system or
            need to be re-enqueued due to their next scheduled run date arriving.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.FinishJobs">
            <summary>
            Finishes any jobs that have completed by updating their records in the job store.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.SmiteThee">
            <summary>
            God execution thread handler.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobRunner.TimeoutJobs">
            <summary>
            Times out any currently running jobs that have been running for too long.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRunner.Instance">
            <summary>
            Gets the singleton job runner instance.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRunner.ExecutingJobCount">
            <summary>
            Gets the number of jobs currently being executed by the runner.
            This number may reflect jobs that have finished but have yet to
            be flushed.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRunner.IsGreen">
            <summary>
            Gets a value indicating whether the runner has never been started
            since the application context was created. Returns true if it has
            never been started, returns fals if it has been started at least once.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobRunner.IsRunning">
            <summary>
            Gets a value indicating whether the runner is currently running.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.JobsInProcessModule">
            <summary>
            Implements <see cref="T:System.Web.IHttpModule"/> to ensure that the <see cref="T:Tasty.Jobs.JobRunner"/>
            instance is started by the current <see cref="T:System.Web.HttpApplication"/>.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobsInProcessModule.Dispose">
            <summary>
            Disposes of any unmanaged resources held by the module.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.JobsInProcessModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the module for the given application context.
            </summary>
            <param name="context">The application context to initialize the module for.</param>
        </member>
        <member name="T:Tasty.Jobs.JobStatus">
            <summary>
            Defies the possible job status types.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.Canceled">
            <summary>
            Identifies an explicitly canceled job.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.Canceling">
            <summary>
            Identifies a job that is in the process of being canceled.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.Failed">
            <summary>
            Identifies a failed job.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.Queued">
            <summary>
            Identifies a queued job.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.Started">
            <summary>
            Identifies a job that has started.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.Succeeded">
            <summary>
            Identifies a job that succeeded.
            </summary>
        </member>
        <member name="F:Tasty.Jobs.JobStatus.TimedOut">
            <summary>
            Identifies a job that has timed out.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.JobStore">
            <summary>
            Provides conviencence methods and a way to access the <see cref="T:Tasty.Jobs.IJobStore"/> 
            currently in use.
            </summary>
        </member>
        <member name="P:Tasty.Jobs.JobStore.Current">
            <summary>
            Gets or sets the current <see cref="T:Tasty.Jobs.IJobStore"/> implementation in use.
            The setter on this property is primarily meant for testing purposes.
            </summary>
            <remarks>
            It is not recommended to set this property during runtime. You should instead
            set it during static initialization if you would rather not infer it from
            the configuration. Setting it later could cause persistence errors if any
            currently-executing jobs try to persist their update data to the new store.
            </remarks>
        </member>
        <member name="T:Tasty.Jobs.PostgresJobStore">
            <summary>
            Implements <see cref="T:Tasty.Jobs.IJobStore"/> for Postgres.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.SqlJobStore">
            <summary>
            Base class for <see cref="T:Tasty.Jobs.IJobStore"/> implementors that use a connection string to connect to a database.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.#ctor">
            <summary>
            Initializes a new instance of the SqlJobStore class.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlJobStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.CancelingJobs(System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of jobs that have been marked as <see cref="F:Tasty.Jobs.JobStatus.Canceling"/>.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="ids">A collection of currently running job IDs.</param>
            <param name="canceling">The function to call with the canceling job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.CreateJob(Tasty.Jobs.JobRecord)">
            <summary>
            Creates a new job record.
            </summary>
            <param name="record">The record to create.</param>
            <returns>The created record.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.DequeueingJobs(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of queued jobs that can be dequeued right now.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="runsAvailable">The maximum number of job job runs currently available, as determined by
            the <see cref="P:Tasty.Configuration.JobsElement.MaximumConcurrency"/> - the number of currently running jobs.</param>
            <param name="dequeueing">The function to call with the dequeued job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.FinishingJobs(System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of jobs that have a status of <see cref="F:Tasty.Jobs.JobStatus.Started"/>.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="ids">A collection of currently running job IDs.</param>
            <param name="finishing">The function to call with the finishing job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.GetJob(System.Int32)">
            <summary>
            Gets a single job record with the given ID.
            </summary>
            <param name="id">The ID of the job record to get.</param>
            <returns>The job record with the given ID, or null if none was found.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.GetLatestScheduledJobs">
            <summary>
            Gets the single most recently queued job for each unique schedule name in the system.
            </summary>
            <returns>A collection of queued scheduled jobs.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.TimingOutJobs(System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of jobs that have a status of <see cref="F:Tasty.Jobs.JobStatus.Started"/>
            and can be timed out. Opens a new transaction, then calls the delegate to perform any work.
            The transaction is committed when the delegate returns.
            </summary>
            <param name="ids">A collection of currently running job IDs.</param>
            <param name="timingOut">The function to call with the timing-out job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.UpdateJobs(System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord},System.Action{Tasty.Jobs.JobRecord})">
            <summary>
            Updates a collection of jobs. Opens a new transaction, then calls the delegate to perform
            any work on each record. The transaction is committed when all of the records have been iterated through.
            </summary>
            <param name="records">The records to update.</param>
            <param name="updating">The function to call for each iteration, which should perform any updates necessary on the job record.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.CreateRecordCollection(System.Data.DataTable)">
            <summary>
            Gets the given result set as a collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.
            Assumes the result set has the expected schema definition.
            </summary>
            <param name="resultSet">The result set to convert into a collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.</param>
            <returns>A collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.DelegatedSetSelect(Tasty.Jobs.JobStatus,System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Common delegated set select implementation (i.e., Canceling or Finishing).
            </summary>
            <param name="status">The <see cref="T:Tasty.Jobs.JobStatus"/> to filter the result set on.</param>
            <param name="ids">The ID set to filter the result set on.</param>
            <param name="delegating">The delegate action to perform with the result set.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlJobStore.EnsureConnectionString">
            <summary>
            Ensures that a connection string is configured.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Tasty.Jobs.SqlJobStore.ConnectionString">
            <summary>
            Gets or sets the connection string to use when connecting to the database.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.#ctor">
            <summary>
            Initializes a new instance of the PostgresJobStore class.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PostgresJobStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.CreateJob(Tasty.Jobs.JobRecord)">
            <summary>
            Creates a new job record.
            </summary>
            <param name="record">The record to create.</param>
            <returns>The created record.</returns>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.DequeueingJobs(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of queued jobs that can be dequeued right now.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="runsAvailable">The maximum number of job job runs currently available, as determined by
            the <see cref="P:Tasty.Configuration.JobsElement.MaximumConcurrency"/> - the number of currently running jobs.</param>
            <param name="dequeueing">The function to call with the dequeued job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.GetJob(System.Int32)">
            <summary>
            Gets a single job record with the given ID.
            </summary>
            <param name="id">The ID of the job record to get.</param>
            <returns>The job record with the given ID, or null if none was found.</returns>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.GetLatestScheduledJobs">
            <summary>
            Gets the single most recently queued job for each unique schedule name in the system.
            </summary>
            <returns>A collection of queued scheduled jobs.</returns>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.UpdateJobs(System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord},System.Action{Tasty.Jobs.JobRecord})">
            <summary>
            Updates a collection of jobs. Opens a new transaction, then calls the delegate to perform
            any work on each record. The transaction is committed when all of the records have been iterated through.
            </summary>
            <param name="records">The records to update.</param>
            <param name="updating">The function to call for each iteration, which should perform any updates necessary on the job record.</param>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.CreateRecordCollection(System.Data.DataTable)">
            <summary>
            Gets the given result set as a collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.
            Assumes the result set has the expected schema definition.
            </summary>
            <param name="resultSet">The result set to convert into a collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.</param>
            <returns>A collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.</returns>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.DelegatedSetSelect(Tasty.Jobs.JobStatus,System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Common delegated set select implementation (i.e., Canceling or Finishing).
            </summary>
            <param name="status">The <see cref="T:Tasty.Jobs.JobStatus"/> to filter the result set on.</param>
            <param name="ids">The ID set to filter the result set on.</param>
            <param name="delegating">The delegate action to perform with the result set.</param>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.InsertCommand(Tasty.Jobs.JobRecord,Npgsql.NpgsqlConnection)">
            <summary>
            Creates a new <see cref="T:Npgsql.NpgsqlCommand"/> for inserting the given <see cref="T:Tasty.Jobs.JobRecord"/> into the database.
            </summary>
            <param name="record">The record to create the command for.</param>
            <param name="connection">The connection to use when creating the command.</param>
            <returns>A new INSERT <see cref="T:Npgsql.NpgsqlCommand"/>.</returns>
        </member>
        <member name="M:Tasty.Jobs.PostgresJobStore.ParameterizeRecord(Tasty.Jobs.JobRecord,Npgsql.NpgsqlCommand)">
            <summary>
            Parameterizes the given <see cref="T:Tasty.Jobs.JobRecord"/> into the given <see cref="T:Npgsql.NpgsqlCommand"/> object.
            </summary>
            <param name="record">The <see cref="T:Tasty.Jobs.JobRecord"/> to parameterize.</param>
            <param name="command">The <see cref="T:Npgsql.NpgsqlCommand"/> to add <see cref="T:Npgsql.NpgsqlParameter"/>s to.</param>
            <returns>The parameterized <see cref="T:Npgsql.NpgsqlCommand"/>.</returns>
        </member>
        <member name="T:Tasty.Jobs.ScheduledJob">
            <summary>
            Base <see cref="T:Tasty.Jobs.IJob"/> implementation for scheduled jobs.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.ScheduledJob.CreateFromConfiguration(Tasty.Configuration.JobScheduledJobElement)">
            <summary>
            Creates a new <see cref="T:Tasty.Jobs.IJob"/> instance from the given scheduled job configuration.
            If the created object extends from <see cref="T:Tasty.Jobs.ScheduledJob"/>, its <see cref="P:Tasty.Jobs.ScheduledJob.Metadata"/>
            collection will be filled with any metadata defined in the configuration.
            </summary>
            <param name="config">The configuration to create the job from.</param>
            <returns>The created job.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration does not identify a valid type or the type identified does not implement <see cref="T:Tasty.Jobs.IJob"/>.</exception>
        </member>
        <member name="M:Tasty.Jobs.ScheduledJob.GetNextExecuteDate(Tasty.Configuration.JobScheduleElement,System.DateTime)">
            <summary>
            Gets the next execution date for the given schedule and the given value of "now".
            </summary>
            <param name="config">The configured job schedule to get the next execution date for.</param>
            <param name="now">The reference date to compare schedule dates to.</param>
            <returns>The schedule's next execution date.</returns>
        </member>
        <member name="P:Tasty.Jobs.ScheduledJob.Metadata">
            <summary>
            Gets the job's configured metadata.
            </summary>
        </member>
        <member name="T:Tasty.Jobs.SqlServerJobStore">
            <summary>
            Implements <see cref="T:Tasty.Jobs.IJobStore"/> for SQL Server.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.#ctor">
            <summary>
            Initializes a new instance of the SqlServerJobStore class.
            </summary>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlServerJobStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.CreateJob(Tasty.Jobs.JobRecord)">
            <summary>
            Creates a new job record.
            </summary>
            <param name="record">The record to create.</param>
            <returns>The created record.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.DequeueingJobs(System.Int32,System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Gets a collection of queued jobs that can be dequeued right now.
            Opens a new transaction, then calls the delegate to perform any work. The transaction
            is committed when the delegate returns.
            </summary>
            <param name="runsAvailable">The maximum number of job job runs currently available, as determined by
            the <see cref="P:Tasty.Configuration.JobsElement.MaximumConcurrency"/> - the number of currently running jobs.</param>
            <param name="dequeueing">The function to call with the dequeued job collection.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.GetJob(System.Int32)">
            <summary>
            Gets a single job record with the given ID.
            </summary>
            <param name="id">The ID of the job record to get.</param>
            <returns>The job record with the given ID, or null if none was found.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.GetLatestScheduledJobs">
            <summary>
            Gets the single most recently queued job for each unique schedule name in the system.
            </summary>
            <returns>A collection of queued scheduled jobs.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.UpdateJobs(System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord},System.Action{Tasty.Jobs.JobRecord})">
            <summary>
            Updates a collection of jobs. Opens a new transaction, then calls the delegate to perform
            any work on each record. The transaction is committed when all of the records have been iterated through.
            </summary>
            <param name="records">The records to update.</param>
            <param name="updating">The function to call for each iteration, which should perform any updates necessary on the job record.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.CreateRecordCollection(System.Data.DataTable)">
            <summary>
            Gets the given result set as a collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.
            Assumes the result set has the expected schema definition.
            </summary>
            <param name="resultSet">The result set to convert into a collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.</param>
            <returns>A collection of <see cref="T:Tasty.Jobs.JobRecord"/>s.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.DelegatedSetSelect(Tasty.Jobs.JobStatus,System.Collections.Generic.IEnumerable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Tasty.Jobs.JobRecord}})">
            <summary>
            Common delegated set select implementation (i.e., Canceling or Finishing).
            </summary>
            <param name="status">The <see cref="T:Tasty.Jobs.JobStatus"/> to filter the result set on.</param>
            <param name="ids">The ID set to filter the result set on.</param>
            <param name="delegating">The delegate action to perform with the result set.</param>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.InsertCommand(Tasty.Jobs.JobRecord,System.Data.SqlClient.SqlConnection)">
            <summary>
            Creates a new <see cref="T:System.Data.SqlClient.SqlCommand"/> for inserting the given <see cref="T:Tasty.Jobs.JobRecord"/> into the database.
            </summary>
            <param name="record">The record to create the command for.</param>
            <param name="connection">The connection to use when creating the command.</param>
            <returns>A new INSERT <see cref="T:System.Data.SqlClient.SqlCommand"/>.</returns>
        </member>
        <member name="M:Tasty.Jobs.SqlServerJobStore.ParameterizeRecord(Tasty.Jobs.JobRecord,System.Data.SqlClient.SqlCommand)">
            <summary>
            Parameterizes the given <see cref="T:Tasty.Jobs.JobRecord"/> into the given <see cref="T:System.Data.SqlClient.SqlCommand"/> object.
            </summary>
            <param name="record">The <see cref="T:Tasty.Jobs.JobRecord"/> to parameterize.</param>
            <param name="command">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to add <see cref="T:System.Data.SqlClient.SqlParameter"/>s to.</param>
            <returns>The parameterized <see cref="T:System.Data.SqlClient.SqlCommand"/>.</returns>
        </member>
        <member name="T:Tasty.NameValueCollections">
            <summary>
            Provides extensions and helpers for <see cref="T:System.Collections.Specialized.NameValueCollection"/>s.
            </summary>
        </member>
        <member name="M:Tasty.NameValueCollections.FillWith(System.Collections.Specialized.NameValueCollection,System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Clears and then fills the collection with the key/value pairs in the given <see cref="T:System.Configuration.KeyValueConfigurationCollection"/>.
            </summary>
            <param name="collection">The collection to fill.</param>
            <param name="configCollection">The <see cref="T:System.Configuration.KeyValueConfigurationCollection"/> to use as a fill source.</param>
        </member>
        <member name="M:Tasty.NameValueCollections.With(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Adds the given key/value pair to a copy of the collection and then returns the new collection.
            </summary>
            <param name="collection">The collection to add the key/value pair to.</param>
            <param name="key">The key to add.</param>
            <param name="value">The value to add.</param>
            <returns>The modified collection.</returns>
        </member>
        <member name="M:Tasty.NameValueCollections.Without(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Removes the given key from a copy of the collection and then returns the new collection.
            </summary>
            <param name="collection">The collection to remove the key from.</param>
            <param name="key">The key to remove.</param>
            <returns>The modified collection.</returns>
        </member>
        <member name="T:Tasty.Primitives">
            <summary>
            Provides extensions and helpers for primitive and built-in types.
            </summary>
        </member>
        <member name="M:Tasty.Primitives.CopyProperties(System.Object,System.Object)">
            <summary>
            Copies any same-named property values from the source object to the destination object.
            Each destination property must be of a type that is assignable from the type
            of the corresponding source property.
            </summary>
            <param name="source">The source object to copy properties from.</param>
            <param name="destination">The destination object to copy properties to.</param>
        </member>
        <member name="M:Tasty.Primitives.FromHex(System.String)">
            <summary>
            Converts the given hex string to an array of bytes.
            </summary>
            <param name="hex">The hex string to convert.</param>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:Tasty.Primitives.SplitAndTrim(System.String,System.Char)">
            <summary>
            Splits the given string on the given character, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The character to split the string on.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Tasty.Primitives.SplitAndTrim(System.String,System.String)">
            <summary>
            Splits the given string on the given separator, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The string to split the string on.</param>
            <returns>The split string.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToHex(System.Byte[])">
            <summary>
            Converts the given byte array to a hex string.
            </summary>
            <param name="buffer">The byte array to convert.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToIso8601UtcString(System.DateTime)">
            <summary>
            Returns a string representation of the given DateTime object
            that conforms to ISO 8601 (in UTC).
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>A string representing the date in ISO 8601 format.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToIso8601UtcPathSafeString(System.DateTime)">
            <summary>
            Returns a string representation of the given DateTime object
            that conforms to ISO 8601 (in UTC), replacing colons and periods
            with dashes for use in filenames.
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>A string representing the date in ISO 8601 format with unsaf path characters removed.</returns>
        </member>
        <member name="M:Tasty.Primitives.TypeNameWithoutAssembly(System.String)">
            <summary>
            Gets the type name from the give type name string without any assembly information.
            </summary>
            <param name="typeName">The type name string to pull the bare type name from.</param>
            <returns>A type name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when typeName is null or empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown when typeName doesn't represent a valid type string.</exception>
        </member>
        <member name="M:Tasty.Primitives.MatchTypeName(System.String)">
            <summary>
            Gets the regular expression match for the given type name.
            </summary>
            <param name="typeName">The type name to get the regular expression match for.</param>
            <returns>A regular expression match.</returns>
        </member>
        <member name="M:Tasty.Primitives.ToUrlPrettyString(System.String)">
            <summary>
            Gets a pretty URL-safe representation of the given string.
            </summary>
            <param name="value">The string value to get a URL-safe representation of.</param>
            <returns>The escaped string value.</returns>
        </member>
        <member name="M:Tasty.Primitives.SplitAndTrim(System.String,System.Char[])">
            <summary>
            Splits the given string on the given separator characters, removing any empty 
            results and trimming whitespace around the rest of the results.
            </summary>
            <param name="value">The string value to split.</param>
            <param name="separator">The separator characters to split the string on.</param>
            <returns>The split string.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore">
            <summary>
            Implements <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to persist <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s
            to the current <see cref="P:System.Web.HttpRuntime.Cache"/>.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.IUrlTokenStore">
            <summary>
            Interface definition for persistent URL token stores.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.SaveDictionary(System.Collections.Generic.IDictionary{System.String,Tasty.Web.UrlTokens.UrlTokenRecord})">
            <summary>
            Saves the updated storage dictionary to the current <see cref="P:System.Web.HttpRuntime.Cache"/>.
            Before saving, the dictionary is cleaned of any expired records.
            </summary>
            <param name="dictionary">The dictionary to save.</param>
        </member>
        <member name="P:Tasty.Web.UrlTokens.HttpCacheUrlTokenStore.Dictionary">
            <summary>
            Gets the storage dictionary from the current <see cref="P:System.Web.HttpRuntime.Cache"/>,
            creating it if it doesn't exist.
            </summary>
            <returns>The storage dictionary.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.IUrlToken">
            <summary>
            Defines the interface for URL tokens.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlToken.GenerateKey">
            <summary>
            Generates a new unique key that can be used to identify the URL token.
            </summary>
            <returns>A unique token identifier.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlToken.Serialize">
            <summary>
            Serializes the URL token for storage.
            </summary>
            <returns>The serialized URL token data.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.IUrlToken.ExpiryHours">
            <summary>
            Gets the number of hours from creation the URL token expires in.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1">
            <summary>
            Interface definition for URL providers for <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s.
            </summary>
            <typeparam name="TToken">The type of <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to provide URLs for.</typeparam>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.TokenFromUrl(System.Uri)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.TokenFromUrl(System.Uri,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when loading token data.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.UrlFromToken(`0)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1.UrlFromToken(`0,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when saving token data.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.PostgresUrlTokenStore">
            <summary>
            Implements <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to persist <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s to PostgreSQL.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.SqlUrlTokenStore">
            <summary>
            Base class for <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> implementors that use a connection string to connect to a database.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlUrlTokenStore.#ctor">
            <summary>
            Initializes a new instance of the SqlUrlTokenStore class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlUrlTokenStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlUrlTokenStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlUrlTokenStore.EnsureConnectionString">
            <summary>
            Ensures that a connection string is configured.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Tasty.Web.UrlTokens.SqlUrlTokenStore.ConnectionString">
            <summary>
            Gets or sets the connection string to use when connecting to the database.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.#ctor">
            <summary>
            Initializes a new instance of the PostgresUrlTokenStore class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PostgresUrlTokenStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.PostgresUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="T:Tasty.Web.QueryString">
            <summary>
            Represents a URL query string as a key/value collection.
            </summary>
        </member>
        <member name="M:Tasty.Web.QueryString.#ctor">
            <summary>
            Initializes a new instance of the QueryString class.
            </summary>
        </member>
        <member name="M:Tasty.Web.QueryString.FromUrl(System.Uri)">
            <summary>
            Parses a <see cref="T:Tasty.Web.QueryString"/> from the given <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to the query of.</param>
            <returns>The parsed <see cref="T:Tasty.Web.QueryString"/> object.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.Parse(System.String)">
            <summary>
            Parses the given query string into a <see cref="T:Tasty.Web.QueryString"/> instance.
            </summary>
            <param name="query">The query string to parse.</param>
            <returns>The parsed <see cref="T:Tasty.Web.QueryString"/> object.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.Add(System.String,System.String)">
            <summary>
            Adds a value to the query string for the specified key.
            </summary>
            <param name="key">The key to add the value for.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.Get(System.String)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The key's value.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.GetAll(System.String)">
            <summary>
            Gets a collection of all values for the specified key.
            </summary>
            <param name="key">The key to get values for.</param>
            <returns>A collection of all of the key's values.</returns>
        </member>
        <member name="M:Tasty.Web.QueryString.Remove(System.String)">
            <summary>
            Removes the specified key and its value(s) from the query string.
            </summary>
            <param name="key">The key to remove.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.Set(System.String,System.String)">
            <summary>
            Sets the value in the query string for the specified key.
            </summary>
            <param name="key">The key to set the value for.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Tasty.Web.QueryString.ToString">
            <summary>
            Converts this instance to a URL-encoded query string.
            </summary>
            <returns>A URL-encoded query string.</returns>
        </member>
        <member name="P:Tasty.Web.QueryString.Keys">
            <summary>
            Gets a collection of all of the keys in the query string.
            </summary>
        </member>
        <member name="P:Tasty.Web.QueryString.Item(System.String)">
            <summary>
            Gets or sets the value for the specified key.
            </summary>
            <param name="key">The key to get or set the value for.</param>
            <returns>The key's value.</returns>
        </member>
        <member name="T:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1">
            <summary>
            Extends <see cref="T:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1"/> for URL tokens in the query string.
            </summary>
            <typeparam name="TToken">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> type to provide URLs for.</typeparam>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1">
            <summary>
            Base <see cref="T:Tasty.Web.UrlTokens.IUrlTokenUrlProvider`1"/> implementation.
            </summary>
            <typeparam name="TToken">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> type to provide URLs for.</typeparam>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.TokenFromUrl(System.Uri)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.TokenFromUrl(System.Uri,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when loading token data.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.UrlFromToken(`0)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> using the <see cref="P:Tasty.Web.UrlTokens.UrlTokenStore.Current"/>
            <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenUrlProvider`1.UrlFromToken(`0,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when saving token data.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.TokenFromUrl(System.Uri,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Parses a <see cref="T:System.Uri"/> into a <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to parse.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when loading token data.</param>
            <returns>The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> identified by the given <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.UrlFromToken(`0,Tasty.Web.UrlTokens.IUrlTokenStore)">
            <summary>
            Generates a <see cref="T:System.Uri"/> from the given <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>.
            </summary>
            <param name="token">The <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> to generate the <see cref="T:System.Uri"/> from.</param>
            <param name="tokenStore">The <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to use when saving token data.</param>
            <returns>The generated <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.QueryStringKey">
            <summary>
            Gets or sets the key to use for the URL token in the query string.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.QueryStringUrlTokenUrlProvider`1.Url">
            <summary>
            Gets or sets the URL to use when generating a URL with a URL token.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.SqlServerUrlTokenStore">
            <summary>
            Implements <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> to persist <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/>s to SQL Server.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.#ctor">
            <summary>
            Initializes a new instance of the SqlServerUrlTokenStore class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlServerUrlTokenStore class.
            </summary>
            <param name="connectionString">The connection string to use when connecting to the database.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.CleanExpiredUrlTokens">
            <summary>
            Cleans all expired token records from the store.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.CreateUrlToken(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Creates a new URL token record.
            </summary>
            <param name="record">The URL token record to create.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.SqlServerUrlTokenStore.GetUrlToken(System.String)">
            <summary>
            Gets a URL token record.
            </summary>
            <param name="key">The key of the record to get.</param>
            <returns>The URL token record identified by the given key.</returns>
        </member>
        <member name="T:Tasty.Web.Uris">
            <summary>
            Providest extensions and helpers for URLs.
            </summary>
        </member>
        <member name="M:Tasty.Web.Uris.AddQueryValue(System.Uri,System.String,System.String)">
            <summary>
            Adds the given key/value to the given URL's query string.
            </summary>
            <param name="url">The URL to add the query string value to.</param>
            <param name="key">The query string key to add.</param>
            <param name="value">The query string value to add.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.AppendPath(System.Uri,System.String)">
            <summary>
            Appens the given path to the URI's path.
            </summary>
            <param name="uri">The URI to append the path to.</param>
            <param name="path">The path to append.</param>
            <returns>A URI with the path appended.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.ClearQueryString(System.Uri)">
            <summary>
            Clears the given URI's query string.
            </summary>
            <param name="uri">The URI to clear the question string from.</param>
            <returns>The URI with its query string cleared.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.Combine(System.String,System.String)">
            <summary>
            Combines the two URL parts with a URL path separator.
            </summary>
            <param name="first">The first part to combine.</param>
            <param name="second">The second part to combine.</param>
            <returns>The combined URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.FileName(System.Uri)">
            <summary>
            Gets the file name part of the URI.
            </summary>
            <param name="uri">The URI to get the file name part of.</param>
            <returns>The file name part of the URI.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.QueryValue(System.Uri,System.String)">
            <summary>
            Gets the value of the given key in the given URL's query string.
            </summary>
            <param name="url">The URL to get the query string value from.</param>
            <param name="key">The query string key to get the value for.</param>
            <returns>The query string value.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.RemoveQueryValue(System.Uri,System.String)">
            <summary>
            Removes the given key from the given URL's query string.
            </summary>
            <param name="url">The URL to remove the query string key from.</param>
            <param name="key">The query string key to remove.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.SetPath(System.Uri,System.String)">
            <summary>
            Sets the given path value for the given URL.
            </summary>
            <param name="url">The URL to set the path for.</param>
            <param name="path">The path to set.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="M:Tasty.Web.Uris.SetQueryValue(System.Uri,System.String,System.String)">
            <summary>
            Sets the given key/value for the given URL's query string.
            </summary>
            <param name="url">The URL to set the query string value for.</param>
            <param name="key">The query string key to set.</param>
            <param name="value">The query string value to set.</param>
            <returns>The updated URL.</returns>
        </member>
        <member name="T:Tasty.Web.MimeType">
            <summary>
            Represents a MIME type consisting of a content-type and a set of file extensions.
            </summary>
        </member>
        <member name="M:Tasty.Web.MimeType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MimeType class.
            </summary>
            <param name="contentType">The MIME type's content type.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the MimeType class.
            </summary>
            <param name="contentType">The MIME type's content type.</param>
            <param name="extensions">The MIME type's valid extension set.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.FromCommon(System.String)">
            <summary>
            Gets a common internet MIME type from the given path's file extension.
            </summary>
            <param name="path">The path of the file to get the common MIME type for.</param>
            <returns>A common MIME type, or "application/octet-stream" if the extension was not recognized.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.IsValidMimeType(System.Collections.Generic.IEnumerable{Tasty.Web.MimeType},System.String)">
            <summary>
            Gets a value indicating whether the given content type is
            a valid MIME type for the given whitelist.
            </summary>
            <param name="allowed">A collection of allowed MIME types to check.</param>
            <param name="contentType">The content type to check.</param>
            <returns>True if the MIME type is valid, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.IsValidMimeType(System.Collections.Generic.IEnumerable{Tasty.Web.MimeType},System.String,System.String)">
            <summary>
            Gets a value indicating whether the given content type and file name constitute
            a valid MIME type for the given whitelist.
            </summary>
            <param name="allowed">A collection of allowed MIME types to check.</param>
            <param name="contentType">The content type to check.</param>
            <param name="fileName">The file name to check.</param>
            <returns>True if the MIME type is valid, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.AddExtension(System.String)">
            <summary>
            Adds a new extension to this MIME type's valid extension set.
            </summary>
            <param name="extension">The extension to add.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.AddExtensions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a new collection of extensions to this MIME type's valid extension set.
            </summary>
            <param name="extensions">The set of extensions to add.</param>
        </member>
        <member name="M:Tasty.Web.MimeType.ContainsExtension(System.String)">
            <summary>
            Gets a value indicating whether the given extension is valid for this MIME type.
            </summary>
            <param name="extension">The extension to check.</param>
            <returns>True if the extension is valid, false otherwise.</returns>
        </member>
        <member name="M:Tasty.Web.MimeType.GetNormalizedExtension(System.String)">
            <summary>
            Gets a normalized extension string (lowercase, beginning with a period).
            </summary>
            <param name="extension">The extension to normalize.</param>
            <returns>The normalized extension string.</returns>
        </member>
        <member name="P:Tasty.Web.MimeType.ContentType">
            <summary>
            Gets the MIME type's content type.
            </summary>
        </member>
        <member name="P:Tasty.Web.MimeType.Extensions">
            <summary>
            Gets the MIME type's valid extension set.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlToken">
            <summary>
            Base <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> implementation.
            </summary>
        </member>
        <member name="F:Tasty.Web.UrlTokens.UrlToken.XmlNamespace">
            <summary>
            Gets the XML namespace used during token serialization.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlToken.GenerateKey">
            <summary>
            Generates a new unique key that can be used to identify the URL token.
            </summary>
            <returns>A unique token identifier.</returns>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlToken.Serialize">
            <summary>
            Serializes the URL token for storage.
            </summary>
            <returns>The serialized URL token data.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlToken.ExpiryHours">
            <summary>
            Gets the number of hours from creation the URL token expires in.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlTokenRecord">
            <summary>
            Represents a URL token record in persistent storage.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenRecord.#ctor">
            <summary>
            Initializes a new instance of the UrlTokenRecord class.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenRecord.#ctor(Tasty.Web.UrlTokens.UrlTokenRecord)">
            <summary>
            Initializes a new instance of the UrlTokenRecord class.
            </summary>
            <param name="record">The prototype <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/> to initialize this instance from.</param>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenRecord.ToUrlToken">
            <summary>
            Converts this instance's <see cref="P:Tasty.Web.UrlTokens.UrlTokenRecord.TokenType"/> and <see cref="P:Tasty.Web.UrlTokens.UrlTokenRecord.Data"/> properties into an <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> object.
            </summary>
            <returns>An <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> object.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Created">
            <summary>
            Gets or sets the date the token was created.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Data">
            <summary>
            Gets or sets the serialized token data (i.e., from calling <see cref="M:Tasty.Web.UrlTokens.IUrlToken.Serialize"/>.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Expires">
            <summary>
            Gets or sets the date the token expires.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.Key">
            <summary>
            Gets or sets the token's unique key.
            </summary>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenRecord.TokenType">
            <summary>
            Gets or sets <see cref="T:Tasty.Web.UrlTokens.IUrlToken"/> implementor that the token is persisted for.
            </summary>
        </member>
        <member name="T:Tasty.Web.UrlTokens.UrlTokenStore">
            <summary>
            Provides global persistence functionality and a way to access the <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/>
            currently in use.
            </summary>
        </member>
        <member name="M:Tasty.Web.UrlTokens.UrlTokenStore.CreateRecordCollection(System.Data.DataTable)">
            <summary>
            Gets the given result set as a collection of <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/>s.
            Assumes the result set has the expected schema definition.
            </summary>
            <param name="resultSet">The result set to convert into a collection of <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/>s.</param>
            <returns>A collection of <see cref="T:Tasty.Web.UrlTokens.UrlTokenRecord"/>s.</returns>
        </member>
        <member name="P:Tasty.Web.UrlTokens.UrlTokenStore.Current">
            <summary>
            Gets or sets the current <see cref="T:Tasty.Web.UrlTokens.IUrlTokenStore"/> implementation in use.
            The setter on this property is primarily meant for testing purposes.
            </summary>
        </member>
    </members>
</doc>
